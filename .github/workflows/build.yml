name: Build and Release

on:
  push:
    paths:
      - 'rgg_save_tool.py'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          pip install pyinstaller

      - name: Build Executable
        run: |
          pyinstaller --onefile rgg_save_tool.py

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: rgg_save_tool-${{ matrix.os }}
          path: dist/rgg_save_tool*

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Get Release
        id: get_release
        run: |
          RELEASE_DATA=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/GarnetSunset/rgg_save_tool_py/releases/tags/1.0")
          UPLOAD_URL=$(echo "$RELEASE_DATA" | jq -r .upload_url)
          RELEASE_ID=$(echo "$RELEASE_DATA" | jq -r .id)
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
      

      - name: Delete Old Asset
        run: |
          ASSET_ID=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/GarnetSunset/rgg_save_tool_py/releases/${{ steps.get_release.outputs.release_id }}/assets" | \
          jq '.[] | select(.name == "rgg_save_tool-ubuntu-latest") | .id')
          if [ "$ASSET_ID" != "" ]; then
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/GarnetSunset/rgg_save_tool_py/releases/assets/$ASSET_ID"
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./dist/rgg_save_tool-ubuntu-latest
          asset_name: rgg_save_tool-ubuntu-latest
          asset_content_type: application/octet-stream